@page
@model ProductManagement.Web.Pages.Addresses.AddressModel
@using ProductManagement
@{
}

<h1>Address Details</h1>
<form id="addressForm" method="post" novalidate>
    <div class="form-group">
        <label for="Street-Address">Street Address</label>
        <textarea class="form-control" id="Street-Address" name="StreetAddress" required></textarea>
        <div class="invalid-feedback" id="streetError">Street Address is required.</div>
    </div>
    <div class="form-group">
        <div class="row">
            <div class="col-md-6">
                <label for="City">City</label>
                <input type="text" class="form-control" id="City" name="City" required>
            </div>
            <div class="col-md-6">
                <label for="State">State</label>
                <input type="text" class="form-control" id="State" name="State" required>
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="row">
        <div class="form-group col-md-6">
            <label for="PostalCode">Postal Code</label>
            <input type="number" class="form-control" id="PostalCode" name="postalCode" required>
            <div class="invalid-feedback" id="postalCodeError">Postal Code is required.</div>
            
        </div>
        <div class="form-group col-md-6">
            <label for="Country">Country</label>
            <select class="form-control" id="Country" name="Country" required>
                <option value="">Select Country</option>
                @foreach (var country in Enum.GetValues(typeof(Country)))
                {
                    <option value="@country">@country</option>
                }
            </select>
            <div class="invalid-feedback" id="countryError">Country is required.</div>
        </div>
        </div>
    </div>
    <div class="pt-3">
    <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</form>
<style>
    /* Custom styling for required fields */
    .invalid-feedback {
        display: none;
        color: #dc3545;
    }
</style>

<script>
    const form = document.getElementById("addressForm");

    form.addEventListener("submit", (event) => {
        event.preventDefault();
        let valid = true;

        const checkValidity = (fieldId, errorId) => {
            const field = document.getElementById(fieldId);
            const error = document.getElementById(errorId);
            if (!field.value) {
                field.classList.add("is-invalid");
                error.style.display = "block";
                valid = false;
            } else {
                field.classList.remove("is-invalid");
                error.style.display = "none";
            }
        };

        const onInputChange = (fieldId, errorId) => {
            const field = document.getElementById(fieldId);
            const error = document.getElementById(errorId);
            field.addEventListener("input", () => {
                if (field.value) {
                    field.classList.remove("is-invalid");
                    error.style.display = "none";
                } else {
                    field.classList.add("is-invalid");
                    error.style.display = "block";
                }
            });
        };

        // Check validity on form submit
        checkValidity("Street-Address", "streetError");
        checkValidity("City", "cityError");
        checkValidity("State", "stateError");
        checkValidity("PostalCode", "postalCodeError");
        checkValidity("Country", "countryError");

        // Add input event listeners for showing/hiding error messages as the user types
        onInputChange("Street-Address", "streetError");
        onInputChange("City", "cityError");
        onInputChange("State", "stateError");
        onInputChange("PostalCode", "postalCodeError");
        onInputChange("Country", "countryError");

        if (valid) {
            // Submit the form if all fields are valid
            form.submit();
        }
    });
</script>
